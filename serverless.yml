org: rajnish
app: aws-node-project
service: aws-node-project

frameworkVersion: '2 || 3'

provider:
  name: aws
  stage: dev
  runtime: nodejs12.x
  region: us-east-1
  profile: serverless-user
  lambdaHashingVersion: 20201221 
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:*
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"  
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage,self:provider.stage}    
plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dotenv-plugin    
custom:
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true # create tables on start      

functions:
  create:
    handler: todos/create.create
    events:
      - http:
          path: todos
          method: post
          cors: true
  get:
    handler: todos/get.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true    
  list:
    handler: todos/list.list
    events:
      - http:
          path: todos
          method: get
          cors: true
  update:
    handler: todos/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true
  delete:
    handler: todos/delete.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true                            
resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}